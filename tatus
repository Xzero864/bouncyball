[1mdiff --git a/src/main/kotlin/GameObjects/Ball.kt b/src/main/kotlin/GameObjects/Ball.kt[m
[1mindex e69de29..de48296 100644[m
[1m--- a/src/main/kotlin/GameObjects/Ball.kt[m
[1m+++ b/src/main/kotlin/GameObjects/Ball.kt[m
[36m@@ -0,0 +1,110 @@[m
[32m+[m[32mï»¿import javafx.scene.canvas.GraphicsContext[m
[32m+[m[32mimport javafx.scene.paint.Color[m
[32m+[m[32mimport javafx.scene.text.Font[m
[32m+[m[32mimport kotlin.random.Random[m
[32m+[m[32mimport java.net.HttpURLConnection[m
[32m+[m[32mimport java.net.URL[m
[32m+[m[32mimport java.nio.charset.Charset[m
[32m+[m[32mimport org.json.JSONObject[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Ball.kt[m
[32m+[m[32m *[m
[32m+[m[32m * This program creates an interactive application featuring bouncing balls,[m
[32m+[m[32m * built using JavaFX.[m
[32m+[m[32m *[m
[32m+[m[32m * Author: Jason Silva (jason_silva@brown.edu[m
[32m+[m[32m * License: MIT License[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32m/********************************************************************************/[m
[32m+[m[32m/*										*/[m
[32m+[m[32m/*	Ball Class								*/[m
[32m+[m[32m/*										*/[m
[32m+[m[32m/********************************************************************************/[m
[32m+[m
[32m+[m[32mclass Ball(private val width: Double, private val height: Double, private val radius: Double) {[m
[32m+[m
[32m+[m[32m    private var x = Random.nextDouble(width)[m
[32m+[m[32m    private var y = Random.nextDouble(height)[m
[32m+[m[32m    private var dx = Random.nextDouble(-1.0, 1.0)[m
[32m+[m[32m    private var dy = Random.nextDouble(-1.0, 1.0)[m
[32m+[m[32m    private var stockTicker = getUniqueTicker()[m
[32m+[m[32m    private var percentageChange = fetchPercentageChange(stockTicker)[m
[32m+[m[32m    private var color = if (percentageChange >= 0) Color.rgb(0, 200, 0) else Color.rgb(255, 69, 0)[m
[32m+[m
[32m+[m[32m    fun updatePosition() {[m
[32m+[m[32m        x += dx[m
[32m+[m[32m        y += dy[m
[32m+[m[32m        if (x <= 0 || x >= width - radius) dx *= -1[m
[32m+[m[32m        if (y <= 0 || y >= height - radius) dy *= -1[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    fun render(gc: GraphicsContext) {[m
[32m+[m[32m        gc.fill = color[m
[32m+[m[32m        gc.fillOval(x, y, radius * 2, radius * 2)[m
[32m+[m[32m        val centerX = x + radius[m
[32m+[m[32m        val centerY = y + radius[m
[32m+[m[32m        gc.fill = Color.WHITE[m
[32m+[m[32m        gc.font = Font.font("Arial", radius * 0.5)[m
[32m+[m[32m        gc.fillText(stockTicker, centerX, centerY - radius * 0.2)[m
[32m+[m[32m        gc.font = Font.font("Arial", radius * 0.3)[m
[32m+[m[32m        gc.fillText(String.format("%.2f%%", percentageChange), centerX, centerY + radius * 0.3)[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private fun fetchPercentageChange(ticker: String): Double {[m
[32m+[m[32m        if (ticker.isEmpty()) return 0.0[m
[32m+[m[32m        val apiKey = "GlGI4mhXMwpkrtzMO9HRJdFmtBflbQfVNjZ772W6"[m
[32m+[m[32m        val url = "https://api.stockdata.org/v1/data/quote?symbols=$ticker&api_token=$apiKey"[m
[32m+[m[32m        return try {[m
[32m+[m[32m            val connection = URL(url).openConnection() as HttpURLConnection[m
[32m+[m[32m            connection.requestMethod = "GET"[m
[32m+[m[32m            val response = connection.inputStream.bufferedReader(Charset.forName("UTF-8")).readText()[m
[32m+[m[32m            val json = JSONObject(response)[m
[32m+[m[32m            val changePercent = json.getJSONArray("data")[m
[32m+[m[32m                .getJSONObject(0)[m
[32m+[m[32m                .getDouble("percent_change")[m
[32m+[m[32m            changePercent[m
[32m+[m[32m        } catch (e: Exception) {[m
[32m+[m[32m            Random.nextDouble(-10.0, 10.0)[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    companion object {[m
[32m+[m[32m        val availableTickers = mutableListOf([m
[32m+[m[32m            "AAPL", "MSFT", "AMZN", "GOOGL", "META", "TSLA", "BRK.B", "NVDA", "JPM", "JNJ",[m
[32m+[m[32m            "V", "UNH", "HD", "PG", "MA", "BAC", "DIS", "NFLX", "KO", "PEP",[m
[32m+[m[32m            "MRK", "PFE", "CSCO", "COST", "WMT", "CVX", "XOM", "INTC", "VZ", "T",[m
[32m+[m[32m            "ABBV", "ACN", "ADBE", "AMD", "AMGN", "AXP", "BA", "BK", "BLK", "BMY",[m
[32m+[m[32m            "C", "CAT", "CL", "CMCSA", "COP", "CRM", "DE", "DHR", "DOW", "DUK",[m
[32m+[m[32m            "EMR", "FDX", "GD", "GE", "GS", "HON", "IBM", "ISRG", "LLY", "LMT",[m
[32m+[m[32m            "LOW", "LRCX", "MDLZ", "MMM", "MO", "MS", "NEE", "NKE", "ORCL", "PEP",[m
[32m+[m[32m            "PLD", "PYPL", "QCOM", "RTX", "SBUX", "SO", "SPGI", "TGT", "TXN", "UPS",[m
[32m+[m[32m            "USB", "WBA", "WFC", "WM", "ZTS", "APA", "APD", "BAX", "BDX", "CARR",[m
[32m+[m[32m            "CF", "CHD", "CI", "COF", "CTAS", "CVS", "D", "DG", "DLR", "DTE",[m
[32m+[m[32m            "ECL", "EIX", "ETN", "F", "FIS", "FRC", "FTNT", "GLW", "HCA", "HIG",[m
[32m+[m[32m            "HLT", "HSY", "ITW", "KHC", "KMI", "LHX", "LYB", "MCD", "MCO", "MKC",[m
[32m+[m[32m            "MSI", "NOC", "NRG", "NUE", "O", "OKE", "OTIS", "PGR", "PKI", "PLTR",[m
[32m+[m[32m            "PM", "PNC", "PPG", "PSA", "ROK", "RSG", "SIVB", "SNPS", "STT", "STZ",[m
[32m+[m[32m            "SWK", "SYK", "TDG", "TER", "TJX", "TROW", "TSCO", "UHS", "VLO", "VRSK",[m
[32m+[m[32m            "VTR", "WEC", "WY", "XYL", "ZBH", "ZION", "ADP", "AEP", "AIG", "AKAM",[m
[32m+[m[32m            "ALL", "AMT", "ANET", "AON", "APTV", "ARE", "ATO", "AWK", "BEN", "BIIB",[m
[32m+[m[32m            "BKR", "BXP", "CDW", "CE", "CHRW", "CLX", "CMS", "CNC", "CPB", "CSX",[m
[32m+[m[32m            "CTSH", "CTVA", "DHI", "DLTR", "DOV", "DXCM", "ED", "EFX", "EL", "EPAM",[m
[32m+[m[32m            "EVRG", "EXPD", "FMC", "FOX", "FTV", "GILD", "GIS", "HAL", "HBAN", "HSIC",[m
[32m+[m[32m            "IP", "IRM", "K", "KEY", "KMB", "KR", "LEG", "LUV", "MGM", "MHK",[m
[32m+[m[32m            "MKTX", "MSFT", "NEM", "NI", "NRZ", "OKE", "OMC", "ON", "ORLY", "OTIS",[m
[32m+[m[32m            "OXY", "PARA", "PCAR", "PFE", "PG", "PXD", "RE", "RF", "RHI", "RJF",[m
[32m+[m[32m            "RMD", "RNG", "SNA", "STE", "STLD", "SWKS", "TAP", "TDY", "TT", "UAA",[m
[32m+[m[32m            "UAL", "UHS", "URI", "VAR", "VFC", "VMC", "VNO", "WAT", "WDC", "WHR"[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        fun getUniqueTicker(): String {[m
[32m+[m[32m            return if (availableTickers.isNotEmpty()) {[m
[32m+[m[32m                availableTickers.removeAt(Random.nextInt(availableTickers.size))[m
[32m+[m[32m            } else {[m
[32m+[m[32m                ""[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
